


适配器模式是用来做适配,它将不兼容的接口转换为可兼容的接口,让原本由于接口不兼容而不能一起工作的类可以一起工作。

适配器模式有两种实现方式：类适配器和对象适配器(推荐使用对象适配器方法实现)。
其中,类适配器使用继承关系来实现,对象适配器使用组合关系来实现。



代理、适配器、桥接、装饰，这四个模式有何区别？

代理模式：代理模式在不改变原始类接口的条件下,为原始类定义一个代理类,主要目的是控制访问,而非加强功能,这是它跟装饰器模式最大的不同。
桥接模式：桥接模式的目的是将接口部分和实现部分分离,从而让它们可以较为容易、也相对独立地加以改变。
装饰器模式：装饰者模式在不改变原始类接口的情况下,对原始类功能进行增强,并且支持多个装饰器的嵌套使用
适配器模式：适配器模式是一种事后的补救策略。适配器提供跟原始类不同的接口,而代理模式、装饰器模式提供的都是跟原始类相同的接口


The classes and objects participating in this pattern are:

Target   
defines the domain-specific interface that Client uses.

Adapter
adapts the interface Adaptee to the Target interface.

Adaptee
defines an existing interface that needs adapting.

Client
collaborates with objects conforming to the Target interface


参考:https://www.dofactory.com/net/adapter-design-pattern
