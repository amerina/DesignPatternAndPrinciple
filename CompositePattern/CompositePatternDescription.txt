
组合模式,就是在一个对象中包含其他对象,这些被包含的对象可能是终点对象（不再包含别的对象）,也有可能是非终点对象（其内部还包含其他对象,或叫组对象）,
我们将对象称为节点,即一个根节点包含许多子节点,这些子节点有的不再包含子节点,而有的仍然包含子节点


将一组对象组织（Compose）成树形结构,以表示一种"部分-整体"的层次结构。组合让客户端可以统一单个对象和组合对象的处理逻辑


组合模式的设计思路,与其说是一种设计模式,倒不如说是对业务场景的一种数据结构和算法的抽象。
其中,数据可以表示成树这种数据结构,业务需求可以通过在树上的递归遍历算法来实现。


组合模式,将一组对象组织成树形结构,将单个对象和组合对象都看做树中的节点,以统一处理逻辑,并且它利用树形结构的特点,递归地处理每个子树,依次简化代码实现。
使用组合模式的前提在于,你的业务场景必须能够表示成树形结构。所以,组合模式的应用场景也比较局限,它并不是一种很常用的设计模式


Participants
组合模式中有三种角色
Component节点规范定义  
	declares the interface for objects in the composition.
	implements default behavior for the interface common to all classes, as appropriate.
	declares an interface for accessing and managing its child components.
	(optional) defines an interface for accessing a component's parent in the recursive structure, and implements it if that's appropriate.

Leaf叶子节点   
	represents leaf objects in the composition. A leaf has no children.
	defines behavior for primitive objects in the composition.

Composite包含子节点的中间节点   
	defines behavior for components having children.
	stores child components.
	implements child-related operations in the Component interface.

Client  
	manipulates objects in the composition through the Component interface.