创建型设计模式主要解决"对象的创建"问题,
结构型设计模式主要解决"类或对象的组合或组装"问题,
行为型设计模式主要解决"类或对象之间的交互"问题


The observer pattern is a software design pattern in which an object, 
called the subject, maintains a list of its dependents, 
called observers, and notifies them automatically of any state changes, usually by calling one of their methods.
观察者模式是一种软件设计模式，其中一个对象，被称为主题，维护着它的从属的列表，
调用观察者，并自动通知他们任何状态的变化，通常通过调用他们的一个方法。


观察者模式（Observer Design Pattern）也被称为发布订阅模式（Publish-SubscribeDesign Pattern）
当对象间存在一对多关系时,则使用观察者模式（Observer Pattern）。比如,当一个对象被修改时,则会自动通知它的依赖对象。


意图：定义对象间的一种一对多的依赖关系,当一个对象的状态发生改变时,所有依赖于它的对象都得到通知并被自动更新。

主要解决：一个对象状态改变给其他对象通知的问题,而且要考虑到易用和低耦合,保证高度的协作。

何时使用：一个对象（目标对象）的状态发生改变,所有的依赖对象（观察者对象）都将得到通知,进行广播通知。

如何解决：使用面向对象技术,可以将这种依赖关系弱化。

关键代码：在ConcreteSubject里有一个列表存放观察者


Participants参与者
Subject主题
	knows its observers. Any number of Observer objects may observe a subject
	provides an interface for attaching and detaching Observer objects.	
	知道它的观察员。任意数量的观察者对象都可以观察一个对象提供了一个连接和分离Observer对象的接口。

ConcreteSubject
	stores state of interest to ConcreteObserver
	sends a notification to its observers when its state changes


Observer
	defines an updating interface for objects that should be notified of changes in a subject.


ConcreteObserver
	maintains a reference to a ConcreteSubject object
	stores state that should stay consistent with the subject's
	implements the Observer updating interface to keep its state consistent with the subject's


根据应用场景的不同,观察者模式会对应不同的代码实现方式：
有同步阻塞的实现方式,也有异步非阻塞的实现方式；有进程内的实现方式,也有跨进程的实现方式。



设计模式要干的事情就是解耦
创建型模式是将创建和使用代码解耦,结构型模式是将不同功能代码解耦,行为型模式是将不同的行为代码解耦,具体到观察者模式,它是将观察者和被观察者代码解耦。