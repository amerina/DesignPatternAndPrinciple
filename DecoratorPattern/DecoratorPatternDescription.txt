
装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能,同时又不改变其结构
它是作为现有的类的一个包装。
这种模式创建了一个装饰类,用来包装原有的类,并在保持类方法签名完整性的前提下，提供了额外的功能。


代理模式中,代理类附加的是跟原始类无关的功能,而在装饰器模式中,装饰器类附加的是跟原始类相关的增强功能


装饰器模式主要解决继承关系过于复杂的问题,通过组合来替代继承。
它主要的作用是给原始类添加增强功能。这也是判断是否该用装饰器模式的一个重要的依据。
除此之外,装饰器模式还有一个特点,那就是可以对原始类嵌套使用多个装饰器。为了满足这个应用场景,在设计的时候,装饰器类需要跟原始类继承相同的抽象类或者接口


优点：装饰类和被装饰类可以独立发展,不会相互耦合,装饰模式是继承的一个替代模式,装饰模式可以动态扩展一个实现类的功能。


