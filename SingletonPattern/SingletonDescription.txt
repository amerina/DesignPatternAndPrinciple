单例模式特点
1、单例类只能有一个实例。
2、单例类必须自己创建自己的唯一实例。
3、单例类必须给所有其他对象提供这一实例。

意图:保证一个类仅有一个实例，并提供一个访问它的全局访问点。
主要解决：一个全局使用的类频繁地创建与销毁。
何时使用：当您想控制实例数目，节省系统资源的时候。
如何解决：判断系统是否已经有这个单例，如果有则返回，如果没有则创建。
关键代码：构造函数是私有的


为什么要使用单例?
从业务概念上,有些数据在系统中只应该保存一份，就比较适合设计为单例类。比如，系统的配置信息类。除此之外，我们还可以使用单例解决资源访问冲突的问题


单例模式使用场景:
单例模式只允许创建一个对象,因此节省内存,加快对象访问速度,因此在对象需要被公用的场合适合使用,如多个模块使用同一个数据源连接对象等等。如： 
1.需要频繁实例化然后销毁的对象。 
2.创建对象时耗时过多或者耗资源过多，但又经常用到的对象。 
3.有状态的工具类对象。 
4.频繁访问数据库或文件的对象。 


单例模式的创建:
创建单例模式有两种方式:饿汉式和懒汉式。
1、饿汉式是直接在程序中初始化一个对象实例,即使程序不使用也会创建一个实例
2、懒汉式是需要使用的时候，才去创建实例




单例模式的几种实现:
1.懒汉式,线程不安全
这种方式是最基本的实现方式,这种实现最大的问题就是不支持多线程.因为没有加锁 synchronized，所以严格意义上它并不算单例模式。
public class Singleton {  
    private static Singleton instance;  
    private Singleton (){}  
  
    public static Singleton getInstance() {  
    if (instance == null) {  
        instance = new Singleton();  
    }  
    return instance;  
    }  
}


2.懒汉式,线程安全(加锁,效率低)
懒汉式相对于饿汉式的优势是支持延迟加载。这种实现方式会导致频繁加锁、释放锁，以及并发度低等问题,频繁的调用会产生性能瓶颈
public class Singleton {  
    private static Singleton instance;  
	private static object locker = new object();

    private Singleton (){}  
    public static Singleton getInstance() { 
		lock (locker)
		{
			 if (instance == null) {  
				instance = new Singleton();  
			 }  
		}
	    return instance;  
    }  
}

3.饿汉式,线程安全(最常用情况)
饿汉式的实现方式,在类加载的期间,就已经将 instance 静态实例初始化好了,所以,instance 实例的创建是线程安全的.不过,这样的实现方式不支持延迟加载实例
public class Singleton {  
    private static Singleton instance = new Singleton();  

    private Singleton (){}  
    public static Singleton getInstance() {  
    return instance;  
    }  
}

4.双检锁/双重校验锁（DCL，即 double-checked locking）
双重检测实现方式既支持延迟加载、又支持高并发的单例实现方式。只要 instance 被创建之后,再调用 getInstance() 函数都不会进入到加锁逻辑中.所以,这种实现方式解决了懒汉式并发度低的问题
public class Singleton {  
    private static Singleton singleton;  
	private static object locker = new object();

    private Singleton (){}  
    public static Singleton getSingleton() {  
	//先检查Instance是否为null,防止每次调用都锁定locker,影响性能
    if (singleton == null) {  
        lock (locker) {  
			if (singleton == null) {  
				singleton = new Singleton();  
			}  
        }  
    }  
    return singleton;  
    }  
}


5.借助Lazy语法实现(新的实现使用此种方式)



延伸:What the difference between static class and singleton
